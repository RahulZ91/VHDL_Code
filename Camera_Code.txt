Package
P_DISPLAY.vhd
library ieee; 
use ieee.std_logic_1164.all;  

 package P_DISPLAY is  -- package p declaration
 
 subtype T_DIGITS is integer range 0 to 10;  
 subtype T_DISPLAY is std_ulogic_vector(6 downto 0); 
 
 -- Values for T_DISPLAY--how the numbers would look like on the display 
 constant SEG_0 : std_ulogic_vector(6 downto 0):= "0111111";   
 constant SEG_1 : std_ulogic_vector(6 downto 0):= "0000011";   
 constant SEG_2 : std_ulogic_vector(6 downto 0):= "1101101";   
 constant SEG_3 : std_ulogic_vector(6 downto 0):= "1100111";   
 constant SEG_4 : std_ulogic_vector(6 downto 0):= "1010011";   
 constant SEG_5 : std_ulogic_vector(6 downto 0):= "1110110";  
 constant SEG_6 : std_ulogic_vector(6 downto 0):= "1111110";   
 constant SEG_7 : std_ulogic_vector(6 downto 0):= "0100011";   
 constant SEG_8 : std_ulogic_vector(6 downto 0):= "1111111";   
 constant SEG_9 : std_ulogic_vector(6 downto 0):= "1110111";   
 constant SEG_E : std_ulogic_vector(6 downto 0):= "1111100";   

 -- pragma translate_off   
 procedure DISPLAY_DIGIT(signal DISPLAY:T_DISPLAY);  -- signal display is of type T_DISPLAY
 -- pragma translate_on end P_DISPLAY;   -- pragma translate_off 
 use std.textio.all; -- to write to text file
 
 package body P_DISPLAY is 
 -------------  
 --  
 --  
 --   12345678   
 --  1  #5## 
 --  2 #    #   
 --  3 4    0   
 --  4 #    #   
 --  5  #6##   
 --  6 #    #  
 --  7 3    1   
 --  8 #    #   
 --  9  #2##   
 --   -------------    
  constant ACTIVE_SEG: character := '#';   
  constant EMPTY_SEG:  character := ' ';     -- Width and height of a digit  
  constant WIDTH: integer := 8;   
  constant HEIGHT: integer := 9;     -- Datatypes to store the complete display in a matrix  
  
  subtype T_MATRIX_ROW  is bit_vector (1 to WIDTH);   
  type    T_DISP_MATRIX is array (1 to HEIGHT) of T_MATRIX_ROW;     -- Definition of the appearance of the 6 segments  
  subtype T_DIGIT_ROW is bit_vector(1 to WIDTH);   
  type    T_SEG_DEF   is array (1 to HEIGHT) of T_DIGIT_ROW;   
  type    T_DIGIT_DEF is array (0 to 6) of T_SEG_DEF;   
  
  -- Defines which segment correspond in the 7 segments 
  constant DIGIT_DEF: T_DIGIT_DEF :=(("00000000", --   ....                                      
									  "00000010", --  .    #                                      
									  "00000010", --  .    0                                      
									  "00000010", --  .    #                                      
									  "00000000", --   ....                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000"),--   .... 
									  
									  ("00000000", --   .... 
                                      "00000000", --  .    .                                      
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000", --   ....                                       
									  "00000010", --  .    #                                      
									  "00000010", --  .    1                                       
									  "00000010", --  .    #                                       
									  "00000000"),--   ....   
									  
									  ("00000000", --   ....                                 
									  "00000000", --  .    .                                   
									  "00000000", --  .    .                                     
									  "00000000", --  .    .                                     
									  "00000000", --   ....                                       
									  "00000000", --  .    .                                      
									  "00000000", --  .    .                                      
									  "00000000", --  .    .                                      
									  "00111100"),--   #2##  
                                      
									  ("00000000", --   ....                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000", --   ....                                       
									  "01000000", --  #    .                                      
									  "01000000", --  3    .                                      
									  "01000000", --  #    .                                       
									  "00000000"),--   ....  
                                      
									  ("00000000", --   ....                                       
									  "01000000", --  #    .                                       
									  "01000000", --  4    .                                       
									  "01000000", --  #    .                                       
									  "00000000", --   ....                                      
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    . 
                                      "00000000"),--   .... 
									  
									  ("00111100", --   #5##                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000", --   ....                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000"),--   ....  
                                      
									  ("00000000", --   ....                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00111100", --   #6##                                       
									  "00000000", --  .    .                                      
									  "00000000", --  .    .                                       
									  "00000000", --  .    .                                       
									  "00000000"));--  ....    
									  
procedure DISPLAY_DIGIT(signal DISPLAY:T_DISPLAY) is    -- a procedure that is sensitive to the DISPLAY signal  
file OUTFILE : TEXT is out "display.txt";    -- used for the text display and names the output file as "display.txt"   
 variable L : line;     --local variable 
 variable DISP_TEXT: string(T_MATRIX_ROW'range);   
 variable DISP_MATRIX: T_DISP_MATRIX;     
 variable COL_L: integer;     
 variable COL_R: integer;    
 begin     -- Clear the display    
 DISP_MATRIX := (others => (others => '0'));       -- Loop over all segments 
    for SEGMENT in 0 to 6 loop      
	if DISPLAY(SEGMENT) = '1' then        
	-- Copy the matrix to the final display         
	-- Loop over all rows of the display         
		for ROW in T_SEG_DEF'range loop          --loops from 0 to 6
		DISP_MATRIX(ROW)(T_DIGIT_ROW'range) :=  DISP_MATRIX(ROW)(T_DIGIT_ROW'range) or     DIGIT_DEF(SEGMENT)(ROW);    
		end loop;      
	end if;     
	end loop;       
	-- Write the matrix to a textfile   
	for I in T_DISP_MATRIX'range loop       -- Start with an empty line   
    DISP_TEXT := (others => EMPTY_SEG);        
		for J in T_MATRIX_ROW'range loop        
			if DISP_MATRIX(I)(J) = '1' then         
			DISP_TEXT(J) := ACTIVE_SEG;        
			end if;       
		end loop;         
	-- Write the line      
	write(L, DISP_TEXT);       
	writeline(OUTFILE, L);     
	end loop;     
end DISPLAY_DIGIT;
end P_DISPLAY; -- pragma translate_on 

ENTITY
--Entity of the 2X1 MUX
library ieee;
use ieee.std_logic_1164.all;
entity DISP_MUX is
port
(EXP_TIME : in integer;
NO_PICS : in integer;
H_ERROR : in std_ulogic;
SHOW_TIME : in std_ulogic;
DISP_PHOTO : out integer);
end DISP_MUX;


--Architecture of the 2X1 MUX
architecture DISP_MUX_Behaviour of DISP_MUX is
begin
process(NO_PICS, EXP_TIME,SHOW_TIME,H_ERROR)
CONSTANT a:INTEGER:=10;
begin
IF ((H_ERROR/='1'and ( SHOW_TIME = '1' or SHOW_TIME='H')) or (H_ERROR/='H' AND (SHOW_TIME = '1' or SHOW_TIME='H'))) THEN
DISP_PHOTO <= EXP_TIME;
ELSIF ((SHOW_TIME /= '1' and H_ERROR ='1') or (SHOW_TIME /= '1' and H_ERROR='H') or (SHOW_TIME/='H' and H_ERROR ='1') or ( SHOW_TIME/='H' and H_ERROR='H')) THEN
DISP_PHOTO<=a;
ELSIF ((SHOW_TIME='1' and H_ERROR='1') or (SHOW_TIME='1' and H_ERROR='H') or (SHOW_TIME='H' and H_ERROR='1') or (SHOW_TIME='H' and H_ERROR='H')) THEN
DISP_PHOTO<=a;
ELSE
DISP_PHOTO <= NO_PICS ;
END IF;
end process;

P2: process(DISP_PHOTO)
begin
case DISP_PHOTO is
WHEN 0 => DISPLAY <= SEG_0;
WHEN 1 => DISPLAY <= SEG_1;
WHEN 2 => DISPLAY <= SEG_2;
WHEN 3 => DISPLAY <= SEG_3;
WHEN 4 => DISPLAY <= SEG_4;
WHEN 5 => DISPLAY <= SEG_5;
WHEN 6 => DISPLAY <= SEG_6;
WHEN 7 => DISPLAY <= SEG_7;
WHEN 8 => DISPLAY <= SEG_8;
WHEN 9 => DISPLAY <= SEG_9;
WHEN others => DISPLAY <= SEG_E;
end case;
end process P2;

End Architecture;

TEST BENCH
Code
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE work.P_DISPLAY.all;

ENTITY DISP_MUX is
end DISP_MUX;

ARCHITECTURE DISP_MUX_BEH of DISP_MUX is
component DISP_MUX
port(	EXP_TIME : 	in T_DIGITS;
	NO_PICS: 	in T_DIGITS;
	SHOW_TIME : 	in std_ulogic;
	H_ERROR : 	in std_ulogic;
	DISPLAY : 	out T_DISPLAY);
end component;

signal w_EXP_TIME: 	T_DIGITS :=0;
signal w_NO_PICS: 	T_DIGITS :=0;
signal w_SHOW_TIME: 	std_ulogic :='0';
signal w_H_ERROR: 	std_ulogic := '0';
signal w_DISPLAY: 	T_DISPLAY;

begin

dut:disp_drv
port map (
EXP_TIME => w_EXP_TIME,
NO_PICS => w_NO_PICS,
SHOW_TIME => w_SHOW_TIME,
H_ERROR => w_H_ERROR,
DISPLAY => w_DISPLAY);

stimuli : process
begin
---DISPLAY_DIGIT(w_DISPLAY);
wait for 100 ns;
w_SHOW_TIME <='1';
w_NO_PICS <=2;
w_EXP_TIME <=0;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;

w_EXP_TIME <=1;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_EXP_TIME <=2;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_EXP_TIME <=3;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_SHOW_TIME <='0';
w_NO_PICS <=2;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_SHOW_TIME <='1';
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_EXP_TIME <=4;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_EXP_TIME <=5;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_EXP_TIME <=6;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_EXP_TIME <=7;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_EXP_TIME <=8;
---DISPLAY_DIGIT(w_DISPLAY);
wait for 30 ns;
w_EXP_TIME <=9;
---DISPLAY_DIGIT(w_DISPLAY);

wait for 30 ns;
w_H_ERROR <= '1';



wait for 30 ns;
wait;
end process;
DISPLAY_DIGIT(w_DISPLAY);
end DISP_MUX_BEH;

configuration cfg_tb_disp_drv of tb_disp_drv is
for test
end for;
end cfg_tb_disp_drv;

